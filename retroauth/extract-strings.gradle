import groovy.xml.MarkupBuilder

task(copyStrings) << {
	// string I want to extract
	def grapStrings = ["choose_account_label", "add_account_button_label"]
	// folder I want the new resources to appear
	File targetAppfolder = new File('retroauth/src/main/res/')
	Properties properties = new Properties()
	properties.load(project.rootProject.file('local.properties').newDataInputStream())
	File resDir = new File(properties.getProperty('sdk.dir') + "/platforms/" + android.compileSdkVersion + "/data/res")
	resDir.eachDirMatch { it.startsWith("values") } { valueFolder ->
		valueFolder.eachFileMatch { "strings.xml".equals(it.toString()) } { stringFile ->
			def resources = new XmlSlurper().parse(stringFile);
			// do the get the string
			def nodes = resources.string.findAll { node ->
				grapStrings.contains(node.@name) && !node.text().isEmpty()
			}
			if(nodes.size() <= 0) return
			File targetFolder = new File(targetAppfolder.canonicalPath + "/" + valueFolder.name)
			if (!targetFolder.exists()) targetFolder.mkdirs()
			File targetFile = new File(targetAppfolder.canonicalPath + "/" + valueFolder.name + "/extracted_strings.xml")
			if (!targetFile.exists()) targetFile.createNewFile()
			Writer fileWriter = targetFile.newWriter("utf-8", false)
			def xml = new MarkupBuilder(fileWriter)
			xml.resources() {
				nodes.each { node ->
					string(name: node.@name, node.text())
				}
			}
			fileWriter.close()
		}
	}
}
// TODO research for a better solution!
tasks.whenTaskAdded { task ->
	if(task.name.matches("generate[a-zA-Z]*Resources")) {
		task.dependsOn copyStrings
	}
}